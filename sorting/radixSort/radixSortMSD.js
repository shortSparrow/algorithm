
/**
 * Тут Radix Sort представлений як MSD (Most Significant Digit)
 * 
 * LSD (Least Significant Digit) сортує, починаючи з молодших розрядів (одиниці, потім десятки, потім сотні і так далі).
 * MSD (Most Significant Digit) сортує, починаючи з старших розрядів (сотні, потім десятки, потім одиниці і так далі).
 * 
 * Опис алгоритму MSD
 *    - Визначаємо найбільший розряд числа для вхідного масиву, тобто скільки цифр
 *      у числі (для числа 1000 - це 4)
 *    - Запускаємо цикл від найбільшого розряду до 0
 *    - Створюємо 10 комірок (бо у нас десяткова система, а в ній максимум 10 цифр)
 *    - У циклі по розрядам ітеруємося по вхідному масиву і визначаємо для кожного числа у яку
 *      комірку його поставити. Наприклад число 345, якщо ми на 3 розряді (сотні) то беремо
 *      цифру 3 (бо у нас три сотні) і ставимо його на індекс 5 і так для всіх чисел.
 * 
 *      Для масиву [ 12, 23, 345, 2345, 5467, 9852 ] на 4 ітерації (розряд тисячі) маємо такий результат
 *              0,       1,    2,    3,  4     5,    6,   7,  8,   9
 *      [ [12, 23, 345], [], [2345], [], [], [5467], [], [], [], [9852]  ]
 *      [12, 23, 345] - не мають тисяч, тому у 0 розряді, 2345 - має 2 тисячі томі індекс 2 і т.п.
 *  
 *      І потім вивільняємо цей масив
 *      [12, 23, 345, 2345, 5467, 9852]
 *
 *           Далі ідемо до ітерації по розряду 3 (сотні)
 *           Маємо масив [12, 23, 345]
 *                 0,    1,  2,    3,    4,  5  6,  7,   8,  9
 *           [ [12, 23], [], [], [345], [], [], [], [], [], []  ]
 *           І потім вивільняємо цей масив
 *           [12,23,345]
 *      
 *                 Далі ідемо до ітерації по розряду 2 (десятки)
 *                 Маємо масив [12,23]
 *                    0,  1,    2,    3,  4,  5  6,  7,  8,  9
 *                 [ [], [12], [23], [], [], [], [], [], [], []  ]
 *                 І потім вивільняємо цей масив
 *                 [12,23]
 *            
 *            
 *                      Далі ідемо до ітерації по розряду 1 (одиниці)
 *                      Маємо масив [12,23]
 *                         0,  1,    2,   3,  4,  5,  6,  7,  8,  9
 *                      [ [], [12], [23], [], [], [], [], [], [], [] 
 *                      І потім вивільняємо цей масив
 *                      [12,23]
 *      
 *                      Тепер іде об'єднання
 *                      return [12,23]
 *            return [345]
 *        return [2345, 5467, 9852]
 *      
 *      result [12, 23, 345, 2345, 5467, 9852]
 * 
 *
 */

function getDigit(num, i) {
    return Math.floor(Math.abs(num) / Math.pow(10, i) % 10);
}

function digitCount(num) {
    if (num === 0) return 1;
    return Math.floor(Math.log10(Math.abs(num))) + 1;
}

function mostDigits(nums) {
    let maxDigits = 0;
    for (let i = 0; i < nums.length; i++) {
        maxDigits = Math.max(maxDigits, digitCount(nums[i]));
    }
    return maxDigits;
}

/**
 * Основна функція MSD Radix Sort.
 * Вона ініціалізує процес сортування, викликаючи рекурсивну допоміжну функцію.
 */
function radixSortMSD(nums) {
    const maxDigits = mostDigits(nums);
    return msdRadixSortHelper(nums, maxDigits, maxDigits - 1);
}

/**
 * Допоміжна рекурсивна функція для MSD Radix Sort.
 */
function msdRadixSortHelper(nums, maxDigits, d) {
    // Базовий випадок для рекурсії
    if (nums.length <= 1 || d < 0) {
        return nums;
    }
    
    /**
     * Створюємо кошики для 10 цифр. 10, тому що ми сортуємо числа в десятковій системі числення.
     * У десятковій системі існує рівно 10 цифр: від 0 до 9.
     */
    const digitBuckets = Array.from({ length: 10 }, () => []);
    
    // Розподіл елементів по кошиках
    for (const num of nums) {
        // Якщо число коротше, воно йде в кошик 0, як і числа з 0 на цьому розряді
        const digit = getDigit(num, d);
        digitBuckets[digit].push(num);
    }
    
    // Рекурсивне сортування і об'єднання
    let result = [];
    for (let i = 0; i < digitBuckets.length; i++) {
        const bucket = digitBuckets[i];
        if (bucket.length > 0) {
            const sortedBucket = msdRadixSortHelper(bucket, maxDigits, d - 1);
            result.push(...sortedBucket);
        }
    }
    
    return result;
}


console.log(radixSortMSD([23, 345, 5467, 12, 2345, 9852])); // [ 12, 23, 345, 2345, 5467, 9852 ]