/**
 * Множення матриць
 *
 * Приклад множення матриць
 *  1  2    5 6  =  1*5+2*7 1*6+2*8   =   19 22
 *  3  4    7 8     3*5+4*7 3*6+4+8       43 50
 *
 * Тут у нас множиться матриця 2х2 на матрицю 2х2 і в результаті отримуємо матрицю 2х2
 * Загальна складність O(2*2*2) = O(n^3) - 2^3 = 8 (рівно стільки операцій у нас і є)
 *
 *
 *
 * 1 2    7  8  9     1*7+2*10  1*8+2*11  1*9+2*12    27 30  33
 * 3 4  * 10 11 12 =  3*7+4*10  3*8+4*11  3*9+4*12  = 61 68  75
 * 5 6                5*7+6*10  5*8+6*11  5*9+6*12    95 106 117
 *
 * Тут у нас матриця 3x2 множиться на матрицю 2x3 - в результаті отримуємо матрицю 3x3
 * Загальна складність O(3*2*3) - тобто 18 (рівно стільки операцій у нас і є)
 *
 * 
 * multipleSquare - це наївний спосіб множити матриці. Такий спосіб ми використовуємо в реальному житті, а
 * тут просто перенесли його у код, для квадратних матриць складність буде O(n^3)
 */

function multipleSquare(matrix1, matrix2) {
  const res = new Array(matrix1.length).fill(null).map(() => new Array(matrix2[0].length).fill(null))
  
  for (let i = 0; i < matrix1.length; i++) {
    for (let j = 0; j < matrix2[0].length; j++) {
      let c = 0;
      for (let k = 0; k < matrix2.length; k++) {
        c += matrix1[i][k] * matrix2[k][j];
      }
      res[i][j] = c
    }
  }

  return res
}

// console.log(
//   multipleSquare(
//     [
//       [1, 2],
//       [3, 4],
//     ],
//     [
//       [5, 6],
//       [7, 8],
//     ]
//   )
// );


console.log(
  multipleSquare(
    [
      [1, 2],
      [3, 4],
      [5, 6],
    ],
    [
      [7, 8, 9],
      [10, 11, 12],
    ]
  )
);
