from typing import List
from knn.calculate_distance import calculate_distance
from knn.find_k_nearest_neighbors import find_k_nearest_neighbors
from knn.predict_label import predict_label

# Опис того, як працює алгоритм
# Запускаємо цикл по X_test
# Визначаємо відстань від поточного елемента у X_test до усіх елементів у X_train. Варто пам'ятати що жодного
# елемента з X_test немає у X_train. Відстань визначаємо за номою L2 (Евклідова норма)
#
# Маючи відстані від поточного елемента X_test до всіх всіх елементів з X_train запускаємо find_k_nearest_neighbors.
# У find_k_nearest_neighbors ми передаємо відстані які знайшли і y_train (labels - тобто правильні цифри які відповідають
# картинкам з X_train), і там об'єднуємо відстані і labels. Пам'ятаємо що порядок у них однаковий, бо відстані - це
# відстані до елементів X_train, тобто вони записані у порядку у якому і елементи X_train, і так само labels - бо це
# labels саме елементів X_train, тож вони записані також у порядку у якому йде X_train. 
# І об'єднавши відстані і labels повертаємо k найближчих елементів до поточного елементу X_test. Тож 
# find_k_nearest_neighbors повертає tuple з відстані і label (правильного числа)
#
# Маючи k найближчих елементів просто дивимось скільки з них відповідають якому числу (label) - це і буде 
# відповідь для нашого елемента X_test, до якої цифри він відноситься
#
# Далі додаємо результат у predictions і повторюємо знову для наступного елемента X_test



# X_train: List[List[int]]
#   Призначення: Це навчальний набір даних.Кожен елемент у цьому списку є окремим навчальним зразком
#                (у нашому випадку, зображенням рукописної цифри). Цифри будуть від 0 до 16 і це 
#                інтенсивність сірого, від 0 - чорного до 16 - білого
#   Приклад: [[0, 0, 5, 13,...], [1, 2, 3, 4,...], ...]
#
# y_train: List[int]
#   Призначення: Це навчальний набір міток (labels), що відповідають кожному зображенню в X_train.
#                Це "правильні відповіді" для кожного навчального зображення. Тобто це буквально написані
#                цифрами ті цифри, що зображені на малюнках в X_train
#   Приклад: [5, 0, 4, 1, 9, 2, ...]
# 
# X_test: List[List[int]]
#   Призначення: Це тестовий набір даних ознак. Ці зображення модель ніколи не "бачила" під час навчання,
#                і ми хочемо, щоб вона їх класифікувала.  Цифри будуть від 0 до 16 і це 
#                інтенсивність сірого, від 0 - чорного до 16 - білого
#   Приклад:  [[0, 0, 5, 13,...], [1, 2, 3, 4,...], ...]
#
# k: int - визначає скільки найближчих сусідів треба брати

def my_knn(
    X_train: List[List[int]], 
    y_train: List[int], 
    X_test: List[List[int]], 
    k: int
) -> List[int]:
    # Цей список буде зберігати прогнозовані мітки для кожного тестового зображення
    predictions = []

    for test_image in X_test:
        distances = calculate_distance(extended_image=test_image, train_set=X_train)
        k_nearest_neighbors = find_k_nearest_neighbors(
            distances=distances, y_train=y_train, k=k
        )
        predicted_label = predict_label(k_nearest_neighbors)
        predictions.append(predicted_label)

    return predictions
