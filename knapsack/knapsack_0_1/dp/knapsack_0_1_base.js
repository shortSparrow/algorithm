/**
 * Задача 0/1 Knapsack
 * Маємо масив предметів де вказана їх цінність і вага. Кожен предмет можна взяти або 0 разів (не брати взагалі), або 1 раз (взяти повністю).
 * Потрібно знайти комбінацію яку можна засунути в рюкзак і яка дасть найбільшу цінність і не перевищить місткість рюкзака
 */

/**
 * Це пошук найбільшого value яке можна отримати. Це рішення не скаже які саме треба взяти продукти, але дасть загальну суму.
 * Ця задача є основою для рішення задачі про рюкзак. Повне рішення (knapsackDP) складається з цього ядра і backtracking
 */
function knapsackDP_Base(stuff, max_weight) {
  const dp = new Array(stuff.length + 1)
    .fill(0)
    .map(() => new Array(max_weight + 1).fill(0));

  /**
   * dp виглядає так:
   *
   *  [   0  1  2  3  4  5 - Weight (від 0 до 5)
   *    [ 0, 0, 0, 0, 0, 0 ], Товар 0 - відсутній товар
   *    [ 0, 0, 0, 0, 0, 0 ], Товар А
   *    [ 0, 0, 0, 0, 0, 0 ], Товар B
   *    [ 0, 0, 0, 0, 0, 0 ], Товар C
   *  ]
   *
   */

  // починаємо заповнювати масив масивів
  for (let i = 1; i <= stuff.length; i++) {
    const current_item = stuff[i - 1];
    for (let j = 0; j <= max_weight; j++) {
      // Випадок 1: Ми НЕ беремо поточний предмет
      // Цінність буде такою ж, як і при розгляді попередніх (i-1) предметів з тією ж вагою j.
      dp[i][j] = dp[i - 1][j];

      // Випадок 2: Ми МОЖЕМО взяти поточний предмет (якщо він поміщається в поточну вагу j)
      // j - це поточна вага
      // j - current_item.weight - залишок доступної ваги після того я поклали товар
      // dp[i-1][j - current_item.weight] - шукаємо елемент з вагою яка лишилася (це максимальне значення value для цієї ваги на поточний момент)
      if (j >= current_item.weight) {
        const new_value =
          current_item.value + dp[i - 1][j - current_item.weight];
        dp[i][j] = Math.max(dp[i][j], new_value);
      }
    }
  }

  return dp;
}

// console.log(
//   knapsackDP_Base(
//     [
//       { name: "A", value: 100, weight: 6 },
//       { name: "B", value: 90, weight: 5 },
//       { name: "C", value: 90, weight: 5 },
//     ],
//     5
//   )
// );
